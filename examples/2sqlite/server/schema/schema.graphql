"""
Date type
"""
scalar Date

type File {
    id: ID
    fileName: String
    fullPath: String
    thumbnail: String
    mimetype: String
}

type Meeting {
    id: ID
    meetingTitle: String
    meetingTime: Date
    meetingType: Int
    meetingroomId: Int
    organizer: String
    sponsor: String
    meetingContent: String
    notifi: String
    warn: String
    meetingStatus: String
    attachment: File
    attachments: File
    meetingroom: Meetingroom
    meetingUsers: [MeetingUser]
    relatedUsers: [User]
}

input MeetingFilter {
    q: String
    ids: [ID]
    id: ID
    meetingTitle: String
    meetingTime: Date
    meetingType: Int
    meetingroomId: Int
    organizer: String
    sponsor: String
    meetingContent: String
    notifi: String
    warn: String
    meetingStatus: String
    attachment: Upload
    attachments: Upload
    meetingTime_lt: Date
    meetingTime_lte: Date
    meetingTime_gt: Date
    meetingTime_gte: Date
    meetingType_lt: Int
    meetingType_lte: Int
    meetingType_gt: Int
    meetingType_gte: Int
    meetingroomId_lt: Int
    meetingroomId_lte: Int
    meetingroomId_gt: Int
    meetingroomId_gte: Int
}

input MeetingInput {
    id: ID
    meetingTitle: String
    meetingTime: Date
    meetingType: Int
    meetingroomId: Int
    organizer: String
    sponsor: String
    meetingContent: String
    notifi: String
    warn: String
    meetingStatus: String
    attachment: Upload
    attachments: Upload
}

type MeetingPage {
    list: [Meeting]
    total: Int
    pages: Int
}

type Meetingroom {
    id: ID
    roomName: String
    area: String
    capacity: String
    roomAddress: String
    facility: String
    photos: String
    status: Boolean
    meetings: [Meeting]
}

input MeetingroomFilter {
    q: String
    ids: [ID]
    id: ID
    roomName: String
    area: String
    capacity: String
    roomAddress: String
    facility: String
    photos: String
    status: Boolean
}

input MeetingroomInput {
    id: ID
    roomName: String
    area: String
    capacity: String
    roomAddress: String
    facility: String
    photos: String
    status: Boolean
}

type MeetingroomPage {
    list: [Meetingroom]
    total: Int
    pages: Int
}

type MeetingUser {
    id: ID
    meetingId: Int
    userId: Int
    meeting: Meeting
    user: User
}

input MeetingUserFilter {
    q: String
    ids: [ID]
    id: ID
    meetingId: Int
    userId: Int
    meetingId_lt: Int
    meetingId_lte: Int
    meetingId_gt: Int
    meetingId_gte: Int
    userId_lt: Int
    userId_lte: Int
    userId_gt: Int
    userId_gte: Int
}

input MeetingUserInput {
    id: ID
    meetingId: Int
    userId: Int
}

type MeetingUserPage {
    list: [MeetingUser]
    total: Int
    pages: Int
}

type Mutation {
    createMeetingroom(
        id: ID
        roomName: String
        area: String
        capacity: String
        roomAddress: String
        facility: String
        photos: String
        status: Boolean
    ): ID
    batchCreateMeetingrooms(meetingrooms: [MeetingroomInput]): [ID]
    updateMeetingroom(
        id: ID
        roomName: String
        area: String
        capacity: String
        roomAddress: String
        facility: String
        photos: String
        status: Boolean
    ): Boolean
    batchUpdateMeetingrooms(meetingrooms: [MeetingroomInput]): [ID]
    removeMeetingroom(id: ID!): Boolean
    batchRemoveMeetingrooms(meetingroomIds: [ID!]): [ID]
    createRelatedMeetings(
        id: ID
        meetingTitle: String
        meetingTime: Date
        meetingType: Int
        meetingroomId: Int
        organizer: String
        sponsor: String
        meetingContent: String
        notifi: String
        warn: String
        meetingStatus: String
        attachment: Upload
        attachments: Upload
        meetingroom: MeetingroomInput
    ): [ID]
    updateRelatedMeetings(
        id: ID
        meetingTitle: String
        meetingTime: Date
        meetingType: Int
        meetingroomId: Int
        organizer: String
        sponsor: String
        meetingContent: String
        notifi: String
        warn: String
        meetingStatus: String
        attachment: Upload
        attachments: Upload
        meetingroom: MeetingroomInput
    ): [ID]
    createMeeting(
        id: ID
        meetingTitle: String
        meetingTime: Date
        meetingType: Int
        meetingroomId: Int
        organizer: String
        sponsor: String
        meetingContent: String
        notifi: String
        warn: String
        meetingStatus: String
        attachment: Upload
        attachments: Upload
    ): ID
    batchCreateMeetings(meetings: [MeetingInput]): [ID]
    updateMeeting(
        id: ID
        meetingTitle: String
        meetingTime: Date
        meetingType: Int
        meetingroomId: Int
        organizer: String
        sponsor: String
        meetingContent: String
        notifi: String
        warn: String
        meetingStatus: String
        attachment: Upload
        attachments: Upload
    ): Boolean
    batchUpdateMeetings(meetings: [MeetingInput]): [ID]
    removeMeeting(id: ID!): Boolean
    batchRemoveMeetings(meetingIds: [ID!]): [ID]
    createRelatedMeetingUsers(
        id: ID
        meetingId: Int
        userId: Int
        meeting: MeetingInput
        user: UserInput
        meetingIds: [Int]
        userIds: [Int]
    ): [ID]
    updateRelatedMeetingUsers(
        id: ID
        meetingId: Int
        userId: Int
        meeting: MeetingInput
        user: UserInput
        meetingIds: [Int]
        userIds: [Int]
    ): [ID]
    createMeetingUser(id: ID, meetingId: Int, userId: Int): ID
    batchCreateMeetingUsers(meetingUsers: [MeetingUserInput]): [ID]
    updateMeetingUser(id: ID, meetingId: Int, userId: Int): Boolean
    batchUpdateMeetingUsers(meetingUsers: [MeetingUserInput]): [ID]
    removeMeetingUser(id: ID!): Boolean
    batchRemoveMeetingUsers(meetingUserIds: [ID!]): [ID]
    createRelatedOrgs(id: ID, orgName: String, parentorgId: Int, parentorg: OrgInput): [ID]
    updateRelatedOrgs(id: ID, orgName: String, parentorgId: Int, parentorg: OrgInput): [ID]
    createOrg(id: ID, orgName: String, parentorgId: Int): ID
    batchCreateOrgs(orgs: [OrgInput]): [ID]
    updateOrg(id: ID, orgName: String, parentorgId: Int): Boolean
    batchUpdateOrgs(orgs: [OrgInput]): [ID]
    removeOrg(id: ID!): Boolean
    batchRemoveOrgs(orgIds: [ID!]): [ID]
    createRelatedUsers(id: ID, name: String, orgId: Int, org: OrgInput): [ID]
    updateRelatedUsers(id: ID, name: String, orgId: Int, org: OrgInput): [ID]
    createUser(id: ID, name: String, orgId: Int): ID
    batchCreateUsers(users: [UserInput]): [ID]
    updateUser(id: ID, name: String, orgId: Int): Boolean
    batchUpdateUsers(users: [UserInput]): [ID]
    removeUser(id: ID!): Boolean
    batchRemoveUsers(userIds: [ID!]): [ID]
}

type Org {
    id: ID
    orgName: String
    parentorgId: Int
    parentorg: Org
    subOrgs: [Org]
    users: [User]
}

input OrgFilter {
    q: String
    ids: [ID]
    id: ID
    orgName: String
    parentorgId: Int
    parentorgId_lt: Int
    parentorgId_lte: Int
    parentorgId_gt: Int
    parentorgId_gte: Int
}

input OrgInput {
    id: ID
    orgName: String
    parentorgId: Int
}

type OrgPage {
    list: [Org]
    total: Int
    pages: Int
}

type Query {
    meetingroom(id: ID!): Meetingroom
    allMeetingrooms(
        page: Int
        perPage: Int
        sortField: String
        sortOrder: String
        filter: MeetingroomFilter
    ): MeetingroomPage
    nonPaginationMeetingrooms(sortField: String, sortOrder: String, filter: MeetingroomFilter): [Meetingroom]
    meeting(id: ID!): Meeting
    allMeetings(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: MeetingFilter): MeetingPage
    nonPaginationMeetings(sortField: String, sortOrder: String, filter: MeetingFilter): [Meeting]
    meetingUser(id: ID!): MeetingUser
    allMeetingUsers(
        page: Int
        perPage: Int
        sortField: String
        sortOrder: String
        filter: MeetingUserFilter
    ): MeetingUserPage
    nonPaginationMeetingUsers(sortField: String, sortOrder: String, filter: MeetingUserFilter): [MeetingUser]
    org(id: ID!): Org
    allOrgs(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: OrgFilter): OrgPage
    nonPaginationOrgs(sortField: String, sortOrder: String, filter: OrgFilter): [Org]
    user(id: ID!): User
    allUsers(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: UserFilter): UserPage
    nonPaginationUsers(sortField: String, sortOrder: String, filter: UserFilter): [User]
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
    id: ID
    name: String
    orgId: Int
    meetingUsers: [MeetingUser]
    relatedMeetings: [Meeting]
    org: Org
}

input UserFilter {
    q: String
    ids: [ID]
    id: ID
    name: String
    orgId: Int
    orgId_lt: Int
    orgId_lte: Int
    orgId_gt: Int
    orgId_gte: Int
}

input UserInput {
    id: ID
    name: String
    orgId: Int
}

type UserPage {
    list: [User]
    total: Int
    pages: Int
}
